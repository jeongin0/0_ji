웹3

트렌지션 듀레이션 : 시작점을 다를 수 없음 따로 시작할 수 없어
트렌지션 딜레이 : 소요되는 시간들을 컨트롤 하는 거야 / 속도의 차이는 일어날 수 있다 / 시작점을 따로 할 수 있다

트렌지션 : 숫자만 변환 가능!
숫자를 부여하면 대상에서 변화가 일어나는 모든걸 감지 css가 많을수록 불리함 / 움직임과 관련된 소스들은 브라우저의 리소스를 요청하게 되면 브라우저 자체는 데스킁탑이나 하드웨워에 리소스를 요청하게 됨  / 컴퓨터스펙이 일반전인 사용자들은 트레지션을 처리가히 어려운게 있음 / 속성을 딱 딱 지정해줘야 됨 그래야 그부분에만 리소스를 꽂을 수 있음


가속도 처리{https://cubic-bezier.com/} - 가속감속등속 처리 copy해서 쓰면 됨

트렌지션의 단점 중 하나인 리센션을 어쩌구하기 위한거

그라디언트 연습해보기 

소수점 두자리까지 css지원 가능

f5말고 -> ctrl r 이전상태를 제거하고 새로고침(임시캐싱을 제거)
변경점이 일어난 것만 다운받는거임

/* keyframe사용자가 지정하는 프레임 / 사용자가 정하는 모션 /
시작과 도착지점을 걸면 자동으로 구현 / 상위호환 개념 / 
더 많은 호환이 가능(?) */

-transform
        /* transform : 변화가 일어난 상태/
        자손의 값이 많음/ 각도단위 -> deg(음수가능) */
    /* 가속도를 잘 넣어도 duration의 시간이 길면 안됨, 시간이 짧아야 가속도가 더 잘 보임 */
    /* 애니메이션은 원래 편방향임  왕복으로 되려면 keyframes을 두개 써야 됨 /
    animation-iteration-count keyframe 중복 없이 한번만으로 양방향 할 수 있음
    */

스큐는 대칭상태로 기울이기 skew()

    /* opacity : 투명도를 주면 그 공간 안에 있는 모든거에 투명도가 들어감 / 
    부드럽게 나타나고 없애는 부분에 넣으면 더 자연스러운 !*/


--------------------------------------------------------------------------------


표 풀이{
라인하이트는 창이 작아졌을 때 엄청 두꺼워질거임(칸이), 
float는 너비 100%일때 효과가 있음
띄어쓰기하면 ~안에 ㅁ 가 됨!
위치(우선순위)전환만으로도 문제해결을 할 수 있음 
}

무지개떡 풀이{
height100%
strong에 블럭을 걸면 줄바꿈이 돼
}
패딩이랑 라인하이트가 %가 맞아야 수평(수직)이됨 


--------------------------------------------------------------------------------

도형 3d할 때 음수로 처리해도 괜찮긴 한데 그래도 양수로 적용하기

backface-visibility -> 디폴트는 visible

앤드키를 누르면 맨 뒤로 감

@import url(''); -> 함수는 기능, 묶여있는게 아니라 자유롭게 돌아다님, 
상대경로를 적으면 됨. 스트링..?처리 됨

해킹디자인할때도 어떤 폰트에 어떤 간격으로 하는지 기준을 정하고 해야 돼

-장치상반응형? 장치마다 반응하는거 

-화면상반응형 : 반응형코드는 밑에서 위로 올라감 / 큰 곳에서 가장 작은 해상도를 만들어

@media screen and (min-width:1280px)
/* -> 1280픽셀 이상인 기기는 다 출력될거임
screen(모든 빛으로 출력되는 장치)장치 분류를 한 거야 / and 조건은 붙이는거 /
(print 라고 쓰면 프린터용 css로 적용하겠다는거야)*/

화면에 축소확대비율이 100%로 되어있어야 css출력 됨

16:9 우리나라 해상도 

1280px우리나라 모니터 크기
768px 요즘 패드

-f12의 시뮬레이터가 적중률이 얼마 안돼 너무 믿을 수 없음 / 그냥 참고용으로 보기
(아이유에스 에이유에스 )

와이파이 아이피가 똑같아야 돼

윈도우+r -> cmd -> ipconfig 엔터 -> 192.168 어쩌구 나올거임 -> 폴더가 있으면
폴더까지 써놓으면 라이브서버처럼 반응함

-global : 공용인 곳 (ex. header, footer)


--------------------------------------------------------------------------------
<xd로 폰트를 찾는건 약간 불안정한 행동임 / 
굵기도 안 나옴 / 귀찮아도 포토샵에서 폰트 하나하나 보는게 정확함>

▶tajam

- 배경이 공간보다 클 때 이미지에 커버를 하면 포지션을 잡아주는데 / ㅂ변화가 없으면 그냥
레프트 탑 걸어두면 됨

- 포지션은 0을 쓰는게 가장 안정적임

-nav 포지션 말고 다른 방법 : 인라인블럭으로 하게 되면
 align으로 정렬 못 시킴 안쪽에 있는 ul은 블럭이라 말이 안되는거임 / 
float로 하기에는 네브가 너무 길어 

라인하이트가 지정이 안되는 모듈도 있음 무조건 들어가는 코드를 짜야 돼

코드를 치는데 너무 많이 친다는 느낌이면 모양이 나온다는 전제하에 필요없는건 빼고
묶을 수 있는거 구룹핑하고

특수문자는 line-height가 더 들어가있음 그래서 주저앉게됨 정렬차제가 다름
특수문자는 일반적으로 오류가 4px정도 됨
100-45 = 55

hr은 라인처럼 보이지만 보더를 사방으로 받을 수 있음


테블릿은 좌우 가이드가 3%간격
모바일은 좌우 2%간격
-> 테블릿부턴 max-width 안 쓰고 하는게 요즘 추세



반응형 단계 
조절->변형->병합->삭제(클라이언트 동의 하에 삭제를 하는)

미디어커리? 

인용구의 블럭컷(부모의 글꼴을 못 잡아 기본값으로 나옴 = textaea)이나 쿼트

crimson pro
regular

montserrat
SemiBold, black, medium, regular

crimsontext
italic


자간은 100/1로 적용하기 
ex) 자간 100 -> letter-spacing 1
자간 안들어가는게 제일 좋고 폰트마다 다름

float로 중앙으로 정렬이 안됨 / 센터가 안됨

전체를 다 보고 -> 이후에 왼쪽에서 오른쪽으로 가니까  span->label(같은거 보고)-> 등등 개별적으로 ㄱㄱ


프로퍼티값
ease	기본값. 느리게 시작하여 점점 빨라졌다가 느리지면서 종료한다.	
linear	시작부터 종료까지 등속 운동을 한다.	
ease-in	느리게 시작한 후 일정한 속도에 다다르면 그 상태로 등속 운동한다.	
ease-out	일정한 속도의 등속으로 시작해서 점점 느려지면서 종료한다.	
ease-in-out	ease와 비슷하게 느리게 시작하여 느리지면서 종료한다.	


overflow x + scroll 하면 해결되는 문제임 (?????????????????어케하는건데 그게)


★flex
flex : 부모가 자손을 배치하는 방식(ul -> flex)
-출력하는 방향을 설정할 수 있다
-지들끼리 순서를 바꾸는 것 가능 float가 못 하는 걸 가능하게 한 것도 있음
-경우의 수가 엄청 많아서 많이 써봐야 돼 같은 결과물을 다른 방식으로 할 수 있는 방법이 하나 더 늘은거임
-top/right/left/bottom 안 씀
-축이 다른데 이름은 똑같음 그래서 이름을 다르게 지정해줘야됨

★ x/y축의 이름(속성 명칭)
-x = justify
:
1.content : 부모를 기준으로 자손을 정렬 시키는 방법
2.items : 자손들끼리 정렬하는 방법
3.self : 자기 혼자 정렬하는 방법

-y = align
:
1.content : 부모를 기준으로 자손을 정렬 시키는 방법
2.items : 자손들끼리 정렬하는 방법
3.self : 자기 혼자 정렬하는 방법

-content가장 중요!(부모가 자손으로 시키는 거니까) / items 안 중요
/ 특정 애들만 정렬시키고 싶으면 content로 싸잡아서 정렬하고 self로 살짝 해주면 끝나는 거임

-좌우의 개념이 없고 start/end개념임

-flex공간 내에서의 x/y축이 중요하지않음 x축이 돌아가서 y축이 될 수 있음
(text-align이나 버티컬라인 이런건 축이 변하지 않아서 left top이 어딘지 아는거임 /
근데 flex는 달라짐 reverse가 잇어서 colume이 있어서 명령내리는 방향이 바껴지는 거임 direction의 개념을 받음)


float : 자손들끼리 배치하는 방식(ul li -> float),정렬의 기준이 없음 부모가 정렬을 해주는 거지

flex-direction: row;(디폴트값)

    /* direction이랑 wrap을 같이 쓸 수 있는 숏핸드 방식 */
    /* flex자체의 숏핸드가 있기 때문에 알고는 있기 */

    /* space-between 부모 기준으로 첫번째/마지막 부모의 양 끝에 붙이고 그 사이에 동일한 간격으로 들어감(flex가 알아서 공간 계산함)*/
    /* space-around 부모 경계선에 닿지 않게 각 항복간 간격을 중앙 간격으로 최대한 넓히고 나머지 공간 나누기2 해서 좌우로 버림나오는거임 */
    /* space-evenly 모든 간격이 동일하게 (나머지 공간을 버리는게 아님) */

    /* 높이를 설정해야만 쓸 수 있는 방식임 flex를 쓸 땐 높이가 있어야 돼 */
    /* strach가 디폴트임 그래서 wrap이 없으면 잡아서 늘려주기만 함(nowrap일 때) */






















