/* 
flex : 부모가 자손을 배치하는 방식(ul -> flex)
-출력하는 방향을 설정할 수 있다
-지들끼리 순서를 바꾸는 것 가능 float가 못 하는 걸 가능하게 한 것도 있음
-경우의 수가 엄청 많아서 많이 써봐야 돼 같은 결과물을 다른 방식으로 할 수 있는 방법이 하나 더 늘은거임
-top/right/left/bottom 안 씀
-축이 다른데 이름은 똑같음 그래서 이름을 다르게 지정해줘야됨

★ x/y축 이름(속성 명칭)
-x = justify
:
1.content : 부모를 기준으로 자손을 정렬 시키는 방법
2.items : 자손들끼리 정렬하는 방법
3.self : 자기 혼자 정렬하는 방법

-y = align
:
1.content : 부모를 기준으로 자손을 정렬 시키는 방법
2.items : 자손들끼리 정렬하는 방법
3.self : 자기 혼자 정렬하는 방법

-content가장 중요!(부모가 자손으로 시키는 거니까) / items 안 중요
/ 특정 애들만 정렬시키고 싶으면 content로 싸잡아서 정렬하고 self로 살짝 해주면 끝나는 거임

-좌우의 개념이 없고 start/end개념임

-flex공간 내에서의 x/y축이 중요하지않음 x축이 돌아가서 y축이 될 수 있음
(text-align이나 버티컬라인 이런건 축이 변하지 않아서 left top이 어딘지 아는거임 /
근데 flex는 달라짐 reverse가 잇어서 colume이 있어서 명령내리는 방향이 바껴지는 거임 direction의 개념을 받음)


float : 자손들끼리 배치하는 방식(ul li -> float),정렬의 기준이 없음 부모가 정렬을 해주는 거지

flex-direction: row;(디폴트값)

flex 조작하면 안되는 부분(상충 개념) 므에?
 */
.flexContainer{
    margin: 10px; padding: 15px; border-radius: 23px; background-color: #a4a4a4;
    display: flex;
}
.flexItem{
    margin: 10px; padding: 20px; color: white; text-align: center;
    border-radius: 27px; background-color: black;
}
.flexContainer.direction{
    flex-direction: row;
    /* 
    row(디폴트) - left/right
    row-reverse - right/left
    colume  top/bottom
    column-reverse - bottom/top 
    */
}
.flexContainer.wrap{
    flex-wrap: wrap-reverse;
    flex-direction: row-reverse;
    /* 
    nowrqp일 땐 줄바꿈이 안됨 무조건 한 줄 배치 float였으면 무조건 (줄바꿈)떨어짙텐데 
    부모가 자손을 배치하는 방식이라 떨어지지않음
    */
    /* 
    nowrap(디폴트 - 1행 모두 배치 / 조건 잡아둠(flex-item width 자동 수축, 너비 상실))
    wrap(inline-block처럼 떨어짐 / width초과시 개행)
    wrap-reverse(개행하되 역배치 / 
    랩핑이 돼있긴 한데 아래왼쪽->오른쪽으로 가다가 위로 쌓이는 방식 inline-block이나 float는 못 함)
    */
}
.flexContainer.wrap .flexItem,
.flexContainer.flow .flexItem{
    width: 500px;
}

.flexContainer.flow{
    flex-flow: row-reverse wrap;
    /* flex-flow : <direction>/<wrap> */
    /* direction이랑 wrap을 같이 쓸 수 있는 숏핸드 방식 */
    /* flex자체의 숏핸드가 있기 때문에 알고는 있기 */
}


.flexContainer.justifyContent{
    justify-content: space-evenly; margin: 0; padding: 0;
    /* start/end/center (이건 inline-block에서 left/right/center가 하는 거랑 똑같) */

    /* space-1/2/3 은 (여백을 자동 계산)공간을 계산하는 거 없이 날로 먹는 속성값임 공간배치 종류 세가지임(inline-block/float 절대 못 하는 거) */
    /* space-between 부모 기준으로 첫번째/마지막 부모의 양 끝에 붙이고 그 사이에 동일한 간격으로 들어감(flex가 알아서 공간 계산함)*/
    /* space-around 부모 경계선에 닿지 않게 각 항복간 간격을 중앙 간격으로 최대한 넓히고 나머지 공간 나누기2 해서 좌우로 버림나오는거임 */
    /* space-evenly 모든 간격이 동일하게 (나머지 공간을 버리는게 아님) */
}
.flexContainer.justifyContent .flexItem,
.flexContainer.alignContent .flexItem{
    margin: 0;
}
.flexContainer.alignContent{
    align-content: space-evenly; height: 400px; flex-wrap: wrap; justify-content: space-evenly;
    /* 높이를 설정해야만 쓸 수 있는 방식임 flex를 쓸 땐 높이가 있어야 돼 */
    /* stretch가 디폴트임 그래서 wrap이 없으면 잡아서 늘려주기만 함(nowrap일 때) */
    /* around는 여백을 남긴다 */
    padding: 0;
}
.flexContainer.alignContent .flexItem{
    width: 500px;
    /* flex에선 min-width/max-width를 많이 씀 그래야 화면이 줄어들고 늘어날 때 가동이 돼야함 */
}
/* 남는공간은 변화가 일어날 때의 여백이 자동계산돼서 디자인과 달라질 수도 있음 */

.flexContainer.justifyItems{
    background-color: yellow; width: 300px; display: grid;
    justify-items: center; flex-direction: column;
}
/* display grid 속성 */
.flexContainer.justifyItems:hover{
    justify-items: flex-start;
}
/* -items : space 3형제 없음 지들끼리 움직이는거라서 */

.flexContainer.alignItems{
    background-color: orange;
}
.flexContainer.alignItems:hover{
    align-items: flex-end; 
    /* baseline 다시 공부하기 */
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px;
}

.flexContainer.justifySelf{
    width: 220px; display: grid;
}
/* self 나머지 애들 납두고 지 혼자 움직임 */
.flexContainer.justifySelf .flexItem:first-of-type{
    justify-self: stretch;
}
.flexContainer.justifySelf:hover .flexItem:first-of-type{
    justify-self: center;
}

.flexContainer.alignSelf{
    justify-content: space-between;
}
.flexContainer.alignSelf .flexItem:first-of-type{
    align-self: flex-end;
}
.flexContainer.alignSelf:hover .flexItem:first-of-type{
    align-self: flex-start;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 100px;
}
/* float랑 다르게 계산하는 것보다 켜서 활성화하는 개념이 커서 자동으로  */


.flexContainer.orderItem .flexItem.order1{
    order: 1;
}
.flexContainer.orderItem .flexItem.order2{
    order: 0;
}
.flexContainer.orderItem .flexItem.order3{
    order: -2;
}
/* 0이 디폴트가 0을 기준으로 마이너스면 가장 앞으로 감 */

.flexContainer.flexShortHand{
    width: 50%; margin: 0; padding: 0; background-color: lightgreen;
    /*  shrink test = max-width: 300px; */
    /* flex-wrap: wrap; */
    /* 랩핑이 있어야 부모가 제대로 잡아줌 */
}
.flexContainer.flexShortHand .flexItem{
    margin: 0; padding: 0; word-break: break-all;
}
.flexContainer.flexShortHand .flexItem:first-of-type{
    /*  팽창비 flex-grow: 2; flex-basis: 0; */
    /* 수축비 flex-shrink: 2; flex-basis: 150px; */
    flex-basis: 150px;
}
.flexContainer.flexShortHand .flexItem:first-of-type~*{
    /* 팽창비 flex-grow: 1; flex-basis: 0; */
    /* 수축비 flex-shrink: 1; flex-basis: 150px; */
    flex-basis: 150px;
}
/* 
    flex-grow: ; = 팽창비
    1:1상태로 화면을 늘리고 줄이면 같이 늘고줄어듬 팽창비를 설정할 수 있으니까 
    팽창비는 저스티파이랑 얼라인이영원한 게 아니라 상황에 따라 달라지는데 
    배이시스도 맥스위스/민위스처럼 조건에 따라 달라짐 배이시스 속성을 안 좋으면 자동으로 auto로 들어감 자동설정 됨
    공간자체를 비율로 바라봄 flex가 대상하는 방법임 이전에 했던 건 다 grow 1로 들어가있는 거임
    설정을 안 해도 기본으로 들어가는 값이니까 
 */
 /* 
    ? flex-grow(팽창(확장)비):
    ! item의 증가비율을 정한다. default: 0. 즉, 빈 공간을 알아서 확장하여 채우지 않는다.
    ! 음수 비허용. 양수 입력 시 '총 증가 내부팽창지수(grow합산)의 너비중 입력된 비율만큼의 너비를 가진다.
    ! 단, max-width가 설정되면 해당 수치를 넘지 않는다.
    * example. item이 3개이고 item들에게 grow가 1이 부여된다면 각각 1/3(33.33%)의 너비를 갖게 된다.

    ?ex.1 > 만약 전체 너비 (300px)의 item 3개에 개별적으로 grow가 부여되었다면?
    todo. flexItem:first-child{flex-grow:2;} -> 0(basis) + (300/4)*2 = 150.
    todo. flexItem:first-child~*{flex-grow:1;} -> 0(basis) + (300/4)*1 = 75.
    ? why 3(x) 4? = first 2 +  ~* 1 + 1.
 */
 /* 300/4는 2:1:1이니까 4인거야 300은 계속 바뀌는거야 너비가 %로 들어갔으니까  */
/* 
? 
    flex-shrink(수축비):
    ! 기준되는 부모(절대)가 줄어들 때 item의 수축비를 정한다. default: 1.
    ! 음수 비허용. 양수 입력 시 '총 수축 내부수축지수(shrink합산)의 너비 중 입력된 비율 만큼 수축될 수 있다.
    ! 단, min-width가 설정되면 해당 수치를 넘지 않는다. (basis -> max로 변환 가동)
    * example. item이 3개이고 item들에게 shrink가 1이 부여된다면 각각 1/3의 수축비를 갖게된다.
    ?ex. 2 > 만약 수축중인 부모 너비가 300px인 item 4개(각너비 150px)에  shrink를 부여하면?
    todo. 초과되는 수치인 150 에 대한. shrink총합인 4를 나눈 37.5가 곧 shrink: 1이된다.
    todo. flexItem:first-child{flex-shrink: 2;} -> 150(대상너비) - (150/4)*2 = 75;
    todo. flexItem:first-child~*{flex-shrink: 1;} -> 150(대상너비) - (150/4)*1 = 112.5;
*/
/*
    basis:
    !item의 너비를 정한다. 기본값은 auto 이며 다양한 단위 percentages(%) || ems || rems || pixels 를 사용 할 수있다.
    auto : 안의 컨텐츠의 길이만큼 너비가 늘어난다.
*/
/*
    * 생략되는 형식
    flex: none;
    flex-grow:0; flex-shrink:0; flex-basis:auto; 상태가 된다.
    flex: <flex-grow>
    flex-shrink:1; flex-basis:0; 상태가 된다.
    flex: <flex-basis>
    flex-grow:1; flex-shrink:1; 상태가 된다.
    flex: <flex-grow> <flex-shrink>
    flex-basis:0; 상태가 된다.
    flex: <flex-grow> <flex-basis>
    flex-shrink:1; 상태가 된다.
    flex: <flex-grow> <flex-shrink> <flex-basis>
    생략한 속성 없음.
    
    todo 자주 사용되는 형식
    1. flex: 0 1 auto; : 확장비는 존재 하지 않고 (남은공간을 채우지 않는다.), 수축만 일어나며 컨텐츠의 너비만큼 너비가 설정된다.
    2. flex: none; : 확장비, 수축비 모두 존재하지 않는다.(남은공간을 채우지도 수축도 일어나지 않는다.)  컨텐츠의 너비만큼 너비가 설정된다.
    3. flex: auto; : 1 1 auto 와 같다. 확장비, 수축비 모두 컨텐츠 갯수만큼 비율로 분배되어 갖게 되고, 컨텐츠의 너비만큼 너비가 설정된다.
    !만약 그 너비가 컨텐츠 보다 작을땐 item이 container의 너비를 넘는다. (스크롤바 발생) word-break : break-all 로 제어.
*/
